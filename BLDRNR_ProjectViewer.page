<apex:page extensions="BLDRNR_ProjectViewer_CTRL" standardController="TASKRAY__Project__c" sidebar="false">
<apex:includeScript value="{!URLFOR($Resource.ArborJS, '/arbor-v0.92/src/graphics/colors.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.ArborJS, '/arbor-v0.92/src/graphics/primitives.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.ArborJS, '/arbor-v0.92/src/graphics/graphics.js')}"/>

<apex:includescript value="https://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js" />
<apex:includeScript value="{!URLFOR($Resource.ArborJS, '/arbor-v0.92/lib/arbor.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.ArborJS, '/arbor-v0.92/lib/arbor-tween.js')}"/>

 
<body>
  <canvas id="viewport" width="1000" height="600"></canvas>

<script> 

 var j$ = jQuery.noConflict();
 
 /*
 these colors are used to show the different levels of relationships
 the base contact starts at purple, and each step removed from the original contact displays at a different color
 purple: "#7A3185"
 dark blue:"#006EA5"
 green:"#009F79"
 yellow:"#f0bc4c"
 orange:"#f07c39"
 */
var colors = ["#7A3185", "#006EA5", "#009F79", "#f0bc4c", "#f07c39"]; 


// this is the object that stores the contact info that displays in the info box
var currentProject = new Object(); 
currentProject.name = '';
currentProject.StartDate = '';
currentProject.EndDate = '';
currentProject.id = '';

// tracks whether you're currently in a mouseover of a node
// since the mouselisteners are at the canvas level, not on each individual node, you're "mousing over" a node if the distance to the nearest node is less than 50
var mouseOutComplete = false;

(function(j$){

  var Renderer = function(canvas){
    var canvas = j$(canvas).get(0)
    var ctx = canvas.getContext("2d");
    var particleSystem;

    var that = {
        init:function(system){
            particleSystem = system;
            // resize canvas to window
            ctx.canvas.width = window.innerWidth - 20;
            particleSystem.screenSize(canvas.width, canvas.height); 
            particleSystem.screenPadding(80);
            that.initMouseHandling();
         },
      
        redraw:function(){
            ctx.canvas.width = window.innerWidth - 20;
            ctx.fillStyle = "white"
            ctx.fillRect(0,0, canvas.width, canvas.height)
        
            particleSystem.eachEdge(function(edge, pt1, pt2){
                ctx.strokeStyle = "rgba(0,0,0, .333)";
                ctx.lineWidth = 1;
                ctx.beginPath ();
                ctx.moveTo (pt1.x, pt1.y);
                ctx.lineTo (pt2.x, pt2.y);
                ctx.stroke ();

                if (edge.data.label) {
                    // set font style
                    ctx.font = 'italic 13px sans-serif';

                    // add white box behind text to block line
                    ctx.fillStyle = "white";
                    var boxWidth = ctx.measureText(edge.data.label).width;
                    ctx.fillRect ((pt1.x + pt2.x  - boxWidth) / 2, (pt1.y + pt2.y) / 2 - 15, boxWidth, 20);
            
                    // add label
                    ctx.fillStyle = "black";
                    ctx.fillText (edge.data.label, (pt1.x + pt2.x - boxWidth) / 2 , (pt1.y + pt2.y) / 2);
                }
            })

        particleSystem.eachNode(function(node, pt){
            var label = node.data.label||"";
            var link = node.data.link||"";
            var isTask = node.data.isTask;
            
            var w = ctx.measureText(""+label).width + 20;
            if (!(""+label).match(/^[ \t]*$/)){
                pt.x = Math.floor(pt.x)
                pt.y = Math.floor(pt.y)
            } else {
              label = null;
            }
            
            // draw a circle centered at pt
            if (node.data.color) {
                ctx.fillStyle = node.data.color
            } else {
                ctx.fillStyle = "rgba(0,0,0,.2)"
            }
            
            if (node.data.color=='none') {
              ctx.fillStyle = "white"
            }
            
            ctx.beginPath();
            
            if (!isTask){
                ctx.arc(pt.x, pt.y, w/2, 0, 2 * Math.PI, false);
                node.data.radius = w/2;
            }                
            else{
                ctx.fillRect(pt.x, pt.y, w, 40);
                node.data.radius = w; 
            }
            
            ctx.fill();
            
            // cneter the label inside the circle 
            if (label){
                ctx.font = "Bold 12px Helvetica";
                ctx.textAlign = "center";
                ctx.fillStyle = "white";
                if (node.data.color=='none'){
                    ctx.fillStyle = '#333333';
                }
                if (!isTask){
                    ctx.fillText(label||"", pt.x, pt.y+4);
                }
                else{
                    ctx.fillText(label||"", pt.x + w/2, pt.y+20);
                }                    
             }
          
        })              
        ctx.strokeStyle = "#cccccc"
        ctx.lineWidth = 1
        ctx.beginPath()
      },

      initMouseHandling:function(){
          // no-nonsense drag and drop (thanks springy.js)
          var dragged = null;

          var mouseoverHandler = {
              mouseover:function(e) {
                  var pos = j$(canvas).offset();
                  _mouseP = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)
                  nearest = particleSystem.nearest(_mouseP);
                  if (nearest.distance < nearest.node.data.radius + 10 ) {
                      
                      if (nearest.node.data.id != currentProject.id || mouseOutComplete) {
                          currentProject.id = nearest.node.data.id;
                          currentProject.name = nearest.node.data.label;
                          if (nearest.node.data.StartDate) {
                              currentProject.StartDate = nearest.node.data.StartDate;
                          } else {
                              currentProject.StartDate = '';
                          }
                            
                          if (nearest.node.data.EndDate) {
                              currentProject.EndDate = nearest.node.data.EndDate;
                          } else {
                              currentProject.EndDate = '';
                          }
                          var infoBox = getContactInfoBox();
                          mouseOutComplete = false;
                          drawToolTip(e.pageX-pos.left, e.pageY-pos.top,infoBox);
                    }                  
                } else if (!mouseOutComplete && nearest.distance > 100) {
                    // hide text box
                    hideToolTip();
                }
            }
        }

        // set up a handler object that will initially listen for mousedowns then
        // for moves and mouseups while dragging
        var handler = {
          clicked:function(e){
            var pos = j$(canvas).offset();
            _mouseP = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)
            nearest = dragged = particleSystem.nearest(_mouseP);      
            
            var currNode = particleSystem.getNode(nearest.node.data.id);
            var currNodeId = nearest.node.data.id;
            
           particleSystem.eachEdge(function(edge, p1, p2){
                if (edge.source != currNode && edge.target != currNode)    {                          
                    particleSystem.pruneEdge(edge);}
            })             
            
            particleSystem.eachNode(function(node, pt){
                if (particleSystem.getEdgesFrom(node).length == 0 && particleSystem.getEdgesTo(node).length == 0){
                    particleSystem.pruneNode(node);
                }            
            })            
            
            
            BLDRNR_ProjectViewer_CTRL.getProjects(currNodeId, function(result, event) {
                if (event.status){
                 //   var currNode = particleSystem.getNode(nearest.node.data.id);
                    output = '';
                    var relatedNode = null;                                    
                    for (var i = 0; i < result.length; i++) {
                        // if a node for result contact does not exist on the page, create it
                        relatedNode = particleSystem.getNode(result[i].id); 
               
                        if (!relatedNode) {
                            relatedNode = particleSystem.addNode(result[i].id, {label:result[i].ProjectName, color:result[i].ProjectColor, link:result[i].link, id:result[i].id, EndDate:result[i].EndDate, StartDate:result[i].StartDate, isTask:result[i].isTask})
                        }
                        // only add edge if the relationship is not already drawn
                        if (particleSystem.getEdges(currNode, relatedNode).length == 0 && particleSystem.getEdges(relatedNode, currNode).length == 0) {
                            particleSystem.addEdge(currNode, relatedNode);
                        }                         
                    }
                }
            }, {escape:true});
            
            
            BLDRNR_ProjectViewer_CTRL.getProjectTasks(currNodeId, function(result, event) {
                if (event.status){
                    output = '';
                    var relatedNode = null;
                    for (var i = 0; i < result.length; i++) {
                        // if a node for result contact does not exist on the page, create it
                        relatedNode = particleSystem.getNode(result[i].id); 
                        console.log('IN LOOP');
                        if (!relatedNode) {
                            console.log('ADDING NODE');
                            relatedNode = particleSystem.addNode(result[i].id, {label:result[i].ProjectName, color:result[i].ProjectColor, link:result[i].link, id:result[i].id, EndDate:result[i].EndDate, StartDate:result[i].StartDate, isTask:result[i].isTask})
                        }
                        // only add edge if the relationship is not already drawn
                        if (particleSystem.getEdges(currNode, relatedNode).length == 0 && particleSystem.getEdges(relatedNode, currNode).length == 0) {
                            console.log('ADDING EDGE');
                            particleSystem.addEdge(currNode, relatedNode);
                        }                         
                    }
                }
            }, {escape:true});            
            

            if (dragged && dragged.node !== null){
              // while we're dragging, don't let physics move the node
              dragged.node.fixed = true
            }       
            j$(canvas).bind('mousemove', handler.dragged)
            j$(window).bind('mouseup', handler.dropped)

            return false
          },
          
          dragged:function(e){
              var pos = j$(canvas).offset();
              var s = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)

              if (dragged && dragged.node !== null){
                  var p = particleSystem.fromScreen(s)
                  dragged.node.p = p
              }

              return false;
          },

          dropped:function(e){
              if (dragged===null || dragged.node===undefined) return;
              if (dragged.node !== null) dragged.node.fixed = false;
              dragged.node.tempMass = 1000;
              dragged = null;
              j$(canvas).unbind('mousemove', handler.dragged);
              j$(window).unbind('mouseup', handler.dropped);
              _mouseP = null;
              return false;
          }
          
        }
        
        // start listening
        j$(canvas).mousedown(handler.clicked);
        j$(canvas).mousemove(mouseoverHandler.mouseover);
        },      
    }
        return that;
}    

  j$(document).ready(function(){
    BLDRNR_ProjectViewer_CTRL.getProjects('', function(result, event) {
        if (event.status){
            
            sys = arbor.ParticleSystem(1000, 200, 0.2) // create the system with sensible repulsion/stiffness/friction
            //particleSystem = sys;
            sys.parameters({gravity:true}) // use center-gravity to make the graph settle nicely (ymmv)
            sys.renderer = Renderer("#viewport") // our newly created renderer will have its .init() method called shortly by sys...
            
            // if there are no relationships, arbor kind of freaks out, so don't let it try to draw a standalone node
            if (result.length < 2) {
                var notice = '<p><strong>There are no relationships for this contact.</strong></p>';
                notice += '<p><a href="/' + result[0].id + '" style="color: white; font-weight: bold;" >[ Return to Contact ] </a><br/>';  
                var encodedNewRel = encodeURI('/a00/e?CF00Nd0000005CzKe=' + result[0].FirstName + ' ' + result[0].LastName + '&CF00Nd0000005CzKe_lkid=' + result[0].id + '&retURL=%2F' + result[0].id);
                notice += '<a href=' + encodedNewRel + ' style="color: white; font-weight: bold;" >[ Create New Relationship ]</a><br />';
                drawToolTip(20, 20, notice);
            } else {            
                basenode = sys.addNode(result[0].id, {label:result[0].ProjectName, color:result[0].ProjectColor, colorIndex:0, link:result[0].link, id:result[0].id, isTask:result[0].isTask})
                for (var i = 1; i < result.length; i++) {
                    relatednode = sys.addNode(result[i].id, {label:result[i].ProjectName, color:result[i].ProjectColor, colorIndex:1, link:result[i].link, id:result[i].id, EndDate:result[i].EndDate, StartDate:result[i].StartDate, isTask:result[i].isTask})
                    sys.addEdge(basenode, relatednode)
                }           
            }
        }
    }, {escape:true});
  })
})(this.jQuery)

 function drawToolTip(x,y,text) {
        j$("#tooltip").css({top: y + 'px', left:  x +'px'});
        j$("#tooltip").animate({opacity: 1.0}, 500);
        j$("#tooltip").html(text);
    }
    
    function hideToolTip() {
        j$("#tooltip").animate({opacity: 0.0}, 50, function() {
            // cheating by adding nonlinked versions of the text, so no one accidentally clicks on an invisible link
            var infoText ='<p><strong>';
            infoText += currentProject.name + '<br />';
            if (currentProject.StartDate) infoText += 'Start: ' + currentProject.StartDate + '<br />';
            if (currentProject.EndDate) infoText += 'End: ' + currentProject.EndDate + '<br />';            
            infoText += '<br />[ View Record ]<br />';
            infoText +='</strong></p>';  
            j$("#tooltip").html(infoText);             
        });
        mouseOutComplete = true;        
    }
    
 function getContactInfoBox() {
    var infoText ='<p><strong>';
    infoText += currentProject.name + '<br />';
    if (currentProject.StartDate) infoText += 'Start: ' + currentProject.StartDate + '<br />';
    if (currentProject.EndDate) infoText += 'End: ' + currentProject.EndDate + '<br />';    
    infoText += '<br /><a href=/' + currentProject.id + ' target="_blank" style="color: white; font-weight: bold;">[ View Record ]</a><br />';
    infoText +='</strong></p>';     
    return infoText;
 }   

 //From Juan Mendes here: http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html
 function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
  if (typeof stroke == "undefined" ) {
    stroke = true;
  }
  if (typeof radius === "undefined") {
    radius = 5;
  }
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.lineTo(x + width - radius, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
  ctx.lineTo(x + width, y + height - radius);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
  ctx.lineTo(x + radius, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
  ctx.lineTo(x, y + radius);
  ctx.quadraticCurveTo(x, y, x + radius, y);
  ctx.closePath();
  if (stroke) {
    ctx.stroke();
  }
  if (fill) {
    ctx.fill();
  }        
  }


</script>

<div style="/* box-shadow: 4px 3px 8px rgba(0, 0, 0, 0.80); -moz-box-shadow: 4px 3px 8px rgba(0, 0, 0, 0.80);-webkit-box-shadow: 4px 3px 8px rgba(0, 0, 0, 0.80);*/-moz-border-radius: 4px; border-radius: 4px; opacity: 0.0; padding:12px; position:absolute; top: 0px; left: 0px; color: white; background-color: #991111; font-face: Helvtica; font-size: 12px;" id="tooltip">
  <h1> </h1>
</div>

</body>
</apex:page>